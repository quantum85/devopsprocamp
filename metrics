#!/usr/bin/env python3
import os,sys
from psutil import cpu_times_percent,virtual_memory,swap_memory

# Outputs script usage message 
def usage():
    print("Usage: ./{} [cpu | mem]".format(os.path.basename(__file__)))
    print("Example: ./{} cpu".format(os.path.basename(__file__)))
    sys.exit(2)

# CPU usage in %
def sys_cpu_util():
    cpu_load = cpu_times_percent(interval=1, percpu=False)
    print("system.cpu.idle {}".format(cpu_load.idle))
    print("system.cpu.user {}".format(cpu_load.user))
    print("system.cpu.guest {}".format(cpu_load.guest))
    print("system.cpu.iowait {}".format(cpu_load.iowait))
    print("system.cpu.stolen {}".format(cpu_load.steal))
    print("system.cpu.system {}".format(cpu_load.system))
    sys.exit(0)

# Memory usage
def sys_mem_util():
    rom_usage = virtual_memory()
    swap_usage =  swap_memory()
    print("virtual total {}".format(rom_usage.total))
    print("virtual used {}".format(rom_usage.used))
    print("virtual free {}".format(rom_usage.free))
    print("virtual shared {}".format(rom_usage.shared))
    print("swap total {}".format(swap_usage.total))
    print("swap used {}".format(swap_usage.used))
    print("swap free {}".format(swap_usage.free))
    sys.exit(0)

# Inspects user input
## No arguments given -> exit
try:
    arg = sys.argv[1]
except IndexError:
    usage()
# The main logic
if arg != 'cpu' and arg != 'mem' or len(sys.argv) != 2:
    usage()
elif arg == 'cpu':
    sys_cpu_util()
elif arg == 'mem':
    sys_mem_util()
else:
    usage()
